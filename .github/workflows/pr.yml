name: Galaxy Tool Linting and Tests for push and PR
on:
  pull_request:
    paths-ignore:
      - 'deprecated/**'
      - 'docs/**'
      - '*'
  push:
    branches:
      - main
      - master
    paths-ignore:
      - 'deprecated/**'
      - 'docs/**'
      - '*'
env:
  GALAXY_FORK: galaxyproject
  GALAXY_BRANCH: release_24.1
  MAX_CHUNKS: 4
  MAX_FILE_SIZE: 1M
concurrency:
  # Group runs by PR, but keep runs on the default branch separate
  # because we do not want to cancel ToolShed uploads
  group: pr-${{ (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && github.run_number || github.ref }}
  cancel-in-progress: true
jobs:
  # the setup job does two things:
  # 1. cache the pip cache and .planemo
  # 2. determine the list of changed repositories
  # it produces one artifact which contains
  # - a file with the latest SHA from the chosen branch of the Galaxy repo
  # - a file containing the list of changed repositories
  # which are needed in subsequent steps.
  setup:
    name: Setup cache and determine changed repositories
    runs-on: ubuntu-latest
    outputs:
      galaxy-head-sha: ${{ steps.get-galaxy-sha.outputs.galaxy-head-sha }}
      repository-list: ${{ steps.discover.outputs.repository-list }}
      tool-list: ${{ steps.discover.outputs.tool-list }}
      chunk-count: ${{ steps.discover.outputs.chunk-count }}
      chunk-list: ${{ steps.discover.outputs.chunk-list }}
      commit-range: ${{ steps.discover.outputs.commit-range }}
    strategy:
      matrix:
        python-version: ['3.11']
    steps:
    - name: Print github context properties
      run: |
        echo 'event: ${{ github.event_name }}'
        echo 'sha: ${{ github.sha }}'
        echo 'ref: ${{ github.ref }}'
        echo 'head_ref: ${{ github.head_ref }}'
        echo 'base_ref: ${{ github.base_ref }}'
        echo 'event.before: ${{ github.event.before }}'
        echo 'event.after: ${{ github.event.after }}'
    - name: Determine latest commit in the Galaxy repo
      id: get-galaxy-sha
      run: echo "galaxy-head-sha=$(git ls-remote https://github.com/${{ env.GALAXY_FORK }}/galaxy refs/heads/${{ env.GALAXY_BRANCH }} | cut -f1)" >> $GITHUB_OUTPUT
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v4
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ steps.get-galaxy-sha.outputs.galaxy-head-sha }}
    - name: Cache .planemo
      uses: actions/cache@v4
      id: cache-planemo
      with:
        path: ~/.planemo
        key: planemo_cache_py_${{ matrix.python-version }}_gxy_${{ steps.get-galaxy-sha.outputs.galaxy-head-sha }}
    # Install the `wheel` package so that when installing other packages which
    # are not available as wheels, pip will build a wheel for them, which can be cached.
    - name: Install wheel
      run: pip install wheel
    - name: Install flake8
      run: pip install flake8 flake8-import-order
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Fake a Planemo run to update cache and determine commit range, repositories, and chunks
      uses: galaxyproject/planemo-ci-action@v1
      id: discover
      with:
        create-cache: ${{ steps.cache-pip.outputs.cache-hit != 'true' || steps.cache-planemo.outputs.cache-hit != 'true' }}
        galaxy-fork: ${{ env.GALAXY_FORK }}
        galaxy-branch: ${{ env.GALAXY_BRANCH }}
        max-chunks: ${{ env.MAX_CHUNKS }}
        python-version: ${{ matrix.python-version }}
    - name: Show commit range
      run: echo '${{ steps.discover.outputs.commit-range }}'
    - name: Show repository list
      run: echo '${{ steps.discover.outputs.repository-list }}'
    - name: Show tool list
      run: echo '${{ steps.discover.outputs.tool-list }}'
    - name: Show chunks
      run: |
        echo 'Using ${{ steps.discover.outputs.chunk-count }} chunks (${{ steps.discover.outputs.chunk-list }})'

  # Planemo lint the changed repositories
  lint:
    name: Lint tool-list
    needs: setup
    if: ${{ needs.setup.outputs.repository-list != '' || needs.setup.outputs.tool-list != '' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11']
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v4
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy-head-sha }}

    - name: Set fail level for pull request
      if: ${{ github.event_name == 'pull_request' }}
      run:
        echo "FAIL_LEVEL=warn" >> "$GITHUB_ENV"
    - name: Set fail level for merge
      if: ${{ github.event_name != 'pull_request' }}
      run:
        echo "FAIL_LEVEL=error" >> "$GITHUB_ENV"
    - name: Planemo lint
      uses: galaxyproject/planemo-ci-action@v1
      id: lint
      with:
        mode: lint
        fail-level: ${{ env.FAIL_LEVEL }}
        repository-list: ${{ needs.setup.outputs.repository-list }}
        tool-list: ${{ needs.setup.outputs.tool-list }}
    - uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: 'Tool linting output'
        path: lint_report.txt

  # deploy the tools to the toolsheds (first TTS for testing)
  deploy:
    name: Deploy
    needs: [setup, lint, combine_outputs]
    if: ${{ (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' ) && github.repository_owner == 'enis' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v4
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy-head-sha }}
    - name: Deploy on testtoolshed
      uses: galaxyproject/planemo-ci-action@v1
      with:
        mode: deploy
        repository-list: ${{ needs.setup.outputs.repository-list }}
        shed-target: testtoolshed
        shed-key: ${{ secrets.TTS_API_KEY }}
      continue-on-error: true
    - name: Deploy on toolshed
      uses: galaxyproject/planemo-ci-action@v1
      with:
        mode: deploy
        repository-list: ${{ needs.setup.outputs.repository-list }}
        shed-target: toolshed
        shed-key: ${{ secrets.TS_API_KEY }}

  deploy-report:
    name: Report deploy status
    needs: [deploy]
    if: ${{ always() && needs.deploy.result != 'success' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' ) && github.repository_owner == 'enis' }}
    runs-on: ubuntu-latest
    steps:
    # report to the PR if deployment failed
    - name: Get PR object
      uses: 8BitJonny/gh-get-current-pr@2.2.0
      id: getpr
      with:
        sha: ${{ github.event.after }}
    - name: Create comment
      uses: peter-evans/create-or-update-comment@v4
      with:
        token: ${{ secrets.PAT }}
        issue-number: ${{ steps.getpr.outputs.number }}
        body: |
          Attention: deployment ${{ needs.deploy.result }}!

          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  determine-success:
    name: Check workflow success
    needs: [setup, lint, flake8, lintr, file_sizes, combine_outputs]
    if: ${{ always() && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
    - name: Check tool lint status
      if: ${{ needs.lint.result != 'success' && needs.flake8.result != 'skipped' }}
      run: exit 1
